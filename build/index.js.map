{"version":3,"file":"index.js","mappings":"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","sources":["webpack://qrcodeapp/./src/config/config.js","webpack://qrcodeapp/./src/config/db.config.js","webpack://qrcodeapp/./src/controllers/adminController.js","webpack://qrcodeapp/./src/controllers/dashboard.js","webpack://qrcodeapp/./src/controllers/itemController.js","webpack://qrcodeapp/./src/controllers/menuController.js","webpack://qrcodeapp/./src/controllers/orderController.js","webpack://qrcodeapp/./src/controllers/restaurantController.js","webpack://qrcodeapp/./src/controllers/tableController.js","webpack://qrcodeapp/./src/errors/base.error.js","webpack://qrcodeapp/./src/middlewares/auth.js","webpack://qrcodeapp/./src/models/adminModel.js","webpack://qrcodeapp/./src/models/deleteUserModel.js","webpack://qrcodeapp/./src/models/itemModel.js","webpack://qrcodeapp/./src/models/menuModel.js","webpack://qrcodeapp/./src/models/orderModel.js","webpack://qrcodeapp/./src/models/restaurantModel.js","webpack://qrcodeapp/./src/models/tableModel.js","webpack://qrcodeapp/./src/routes/v1/adminRoutes.js","webpack://qrcodeapp/./src/routes/v1/dashboardRoutes.js","webpack://qrcodeapp/./src/routes/v1/itemRoutes.js","webpack://qrcodeapp/./src/routes/v1/menuRoutes.js","webpack://qrcodeapp/./src/routes/v1/orderRoutes.js","webpack://qrcodeapp/./src/routes/v1/restaurantRoutes.js","webpack://qrcodeapp/./src/routes/v1/tableRoutes.js","webpack://qrcodeapp/./src/uitls/errorHandler.js","webpack://qrcodeapp/./src/uitls/utils.js","webpack://qrcodeapp/external commonjs \"bcrypt\"","webpack://qrcodeapp/external commonjs \"body-parser\"","webpack://qrcodeapp/external commonjs \"cors\"","webpack://qrcodeapp/external commonjs \"dotenv\"","webpack://qrcodeapp/external commonjs \"express\"","webpack://qrcodeapp/external commonjs \"express-fileupload\"","webpack://qrcodeapp/external commonjs \"http-status-codes\"","webpack://qrcodeapp/external commonjs \"jsonwebtoken\"","webpack://qrcodeapp/external commonjs \"mongoose\"","webpack://qrcodeapp/external commonjs \"uuid\"","webpack://qrcodeapp/external node-commonjs \"fs\"","webpack://qrcodeapp/external node-commonjs \"os\"","webpack://qrcodeapp/external node-commonjs \"path\"","webpack://qrcodeapp/webpack/bootstrap","webpack://qrcodeapp/./src/index.js"],"sourcesContent":["const dotenv = require('dotenv');\r\n\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    logDbUrl: process.env.LOG_DB_URL,\r\n    tokenSecretKey: process.env.JWT_SECRET,\r\n    port: process.env.PORT,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY\r\n};","const mongoose = require('mongoose');\r\nconst { mongoDbUrl } = require('./config');\r\n\r\nfunction connectToDB () {\r\n    try {\r\n        mongoose.connect(mongoDbUrl);\r\n    } catch (error) {\r\n        console.log(\"Unable to connect to database\");\r\n        return error;\r\n    };\r\n};\r\n\r\nmodule.exports = { connectToDB };\r\n","const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port, tokenSecretKey } = require(\"../config/config\");\r\n\r\n\r\n// ADD ADMIN\r\nconst createAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, password, mobile } = req.body;\r\n\r\n        if (!name || !email || !password || !mobile) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        password = hashedPassword;\r\n\r\n        let adminObj = {\r\n            userId: generateRandomAlphaNumericID(26),\r\n            name,\r\n            email,\r\n            password,\r\n            mobile,\r\n        };\r\n\r\n        let newAdmin = await adminModel.create(adminObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Admin created\",\r\n            data: newAdmin,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADMIN LOGIN\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n\r\n        if (!email || !password) {\r\n            return res.status(400).send({ status: false, message: \"Email and password are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ email });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        bcrypt.compare(password, admin.password, function (err, result) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        async function hasAccess(result) {\r\n            if (result) {\r\n                let data = {};\r\n                let date = Date.now();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: admin.email,\r\n                        adminId: admin._id.toString(),\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                (data._id = admin._id.toString()), (data.email = email);\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n                admin.sessionToken = generateRandomAlphaNumericID(51);\r\n\r\n                await admin.save();\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Successfully login\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nconst getAllBookingsOfUser = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, userId } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let user = await userModel.findOne({ userId });\r\n\r\n            if (!user) {\r\n                return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n            }\r\n\r\n            let userAllBookings = await bookingModel.find({ userId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: userAllBookings,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE DAY REQUESTS\r\nconst getOneDayBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let date;\r\n            if (req.params.date) {\r\n                date = req.params.date;\r\n            } else {\r\n                let today = new Date(); // Use today's date if no date is provided\r\n                const year = today.getFullYear();\r\n                const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(today.getDate()).padStart(2, \"0\");\r\n\r\n                date = `${year}-${month}-${day}`;\r\n            }\r\n\r\n            let oneDayBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n            let grandTotal = 0;\r\n            for (let booking of oneDayBookings) {\r\n                grandTotal += booking.grand_total;\r\n            };\r\n\r\n            let data = {\r\n                totalBookings: oneDayBookings,\r\n                oneDayRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE WEEK REQUESTS\r\nconst getOneWeekBookings = async (req, res) => {\r\n    try {\r\n        let { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let startDate;\r\n            let endDate;\r\n\r\n            if (req.params.startDate && req.params.endDate) {\r\n                startDate = req.params.startDate;\r\n                endDate = req.params.endDate;\r\n            } else {\r\n                const date = new Date();\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n                endDate = `${year}-${month}-${day}`;\r\n\r\n                const oneWeekAgo = new Date(date.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                const startYear = oneWeekAgo.getFullYear();\r\n                const startMonth = String(oneWeekAgo.getMonth() + 1).padStart(2, '0');\r\n                const startDay = String(oneWeekAgo.getDate()).padStart(2, '0');\r\n\r\n                startDate = `${startYear}-${startMonth}-${startDay}`;\r\n            };\r\n\r\n            let oneWeekBookings = await bookingModel.find({\r\n                BookingDate: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneWeekBookings.length) {\r\n                for (let booking of oneWeekBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneWeekBookings: oneWeekBookings,\r\n                grandTotal: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE MONTH REVENUE AND REQUESTS (ADMIN API)\r\nconst getOneMonthBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, month, year } = req.params;\r\n\r\n        if (!adminId || !sessionToken || !month || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-${month}-01`; // Month is zero-based index\r\n            const endDate = `${year}-${month}-31`;\r\n\r\n            const oneMonthBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n\r\n            if (oneMonthBookings.length) {\r\n                for (let booking of oneMonthBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneMonthBookings: oneMonthBookings,\r\n                oneMonthRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE YEAR REQUESTS AND REVENUE (ADMIN API);\r\nconst getOneYearBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, year } = req.params;\r\n        if (!adminId || !sessionToken || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-01-01`; // January 1st of the provided year\r\n            const endDate = `${year}-12-31`; // December 31st of the provided year\r\n\r\n            let oneYearBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneYearBookings.length) {\r\n                for (let booking of oneYearBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneYearRequests: oneYearBookings,\r\n                oneYearRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createAdmin,\r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n};\r\n","const restaurantModel = require('../models/restaurantModel');\r\nconst { getCurrentIPAddress } = require(\"../uitls/utils\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// DASHBOARD API\r\nconst getDashboard = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"UserId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\"});\r\n        };\r\n\r\n        let bannerImages = restaurant.banners;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            banners: bannerImages\r\n        });\r\n        \r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL BANNER IMGAES\r\nconst getAllBannerImages = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\"});\r\n        };\r\n\r\n        let bannerImages = restaurant.banners;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            banners: bannerImages\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n// UPDATE BANNER IMAGES\r\nconst updateBannerImages = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        }\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        // }\r\n\r\n        let restaurant = await restaurantModel.findOne({userId});\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not found\"});\r\n        };\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let bannerImage = req.files.bannerImage;\r\n\r\n        if (!bannerImage) {\r\n            return res.status(400).send({ status: false, message: \"No banner image uploaded\" });\r\n        }\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/banners/\";\r\n        let imgUniqName = uuid.v4() + \".\" + bannerImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"banners\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = restaurant.banners[index].imageName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"banners\", oldImage);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n            \r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let updatedBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            restaurant.banners[index] = updatedBannerObj;\r\n\r\n            await restaurant.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner updated successfully\",\r\n                banners: restaurant.banners,\r\n            });\r\n        } else {\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            // bannerObj.bannerImages.push(newBannerObj);\r\n            restaurant.banners.push(newBannerObj);\r\n\r\n            await restaurant.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner added successfully\",\r\n                banners: restaurant.banners,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE BANNER IMAGE BY ID\r\nconst deleteBannerImage = async (req, res) => {\r\n    try {\r\n        let { userId, imageId } = req.params;\r\n        if (!userId || !imageId ) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        // };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        if (restaurant.banners.length) {\r\n            for (let i = 0; i < restaurant.banners.length; i++) {\r\n                if (imageId === restaurant.banners[i]._id.toString()) {\r\n                    let imgName = restaurant.banners[i].imageName;\r\n                    let imgPath = path.join(__dirname, \"..\", \"banners\", imgName);\r\n\r\n                    if (fs.existsSync(imgPath)) {\r\n                        fs.unlinkSync(imgPath);\r\n                    }\r\n\r\n                    let arr = restaurant.banners;\r\n                    arr.splice(i, 1);\r\n                    restaurant.banners = arr;\r\n\r\n                    await restaurant.save();\r\n                };\r\n            };\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Banner deleted successfully\",\r\n            banners: restaurant.banners,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    getDashboard,\r\n    updateBannerImages,\r\n    deleteBannerImage,\r\n    getAllBannerImages\r\n};\r\n","const itemModel = require('../models/itemModel');\r\nconst restaurantModel = require('../models/restaurantModel');\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// ADD ITEMS IN MENU\r\nconst addItems = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\" });\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not Found\"});\r\n        };\r\n\r\n        let {\r\n            menuId,\r\n            item_name,\r\n            menuName,\r\n            description,\r\n            selling_price,\r\n            isTaxable,\r\n            preparing_time,\r\n            notes,\r\n            visit_count,\r\n            status,\r\n            seo_keywords,\r\n            video_link,\r\n            isVeg\r\n        } = req.body;\r\n\r\n        let itemData = {\r\n            userId,\r\n            menuId,\r\n            item_name,\r\n            menuName,\r\n            description,\r\n            selling_price,\r\n            isTaxable,\r\n            preparing_time,\r\n            notes,\r\n            visit_count,\r\n            status,\r\n            seo_keywords,\r\n            video_link: video_link ? video_link : \"\",\r\n            isVeg,\r\n        };\r\n\r\n        let newItem = await itemModel.create(itemData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Item Added Successfully\",\r\n            data: newItem\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADD / UPDATE ITEM IMAGES\r\nconst addUpdateItemImages = async (req, res) => {\r\n    try {\r\n        let { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid itemId\"});\r\n        };\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\"});\r\n        };\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let itemImage = req.files.itemImage;\r\n\r\n        if (!itemImage) {\r\n            return res.status(400).send({ status: false, message: \"No item image uploaded\"});\r\n        };\r\n\r\n        let { index, img_id, imageName, isNewPick } = parsedData;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/items/\";\r\n        let imgUniqName = uuid.v4() + \".\" + itemImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"items\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImageName = item.item_images[index].imgName;\r\n            let oldImagePath = path.join(__dirname, \"..\", \"items\", oldImageName);\r\n\r\n            if (fs.existsSync(oldImagePath)) {\r\n                fs.unlinkSync(oldImagePath);\r\n            };\r\n\r\n            itemImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let imgObj = {\r\n                imgName: imgUniqName,\r\n                imgPath: imgFullUrl\r\n            };\r\n\r\n            item.item_images[index] = imgObj;\r\n\r\n            await item.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Item image updated successfully\",\r\n                data: item.item_images,\r\n            });\r\n        } else {\r\n            itemImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newImgObj = {\r\n                imgName: imgUniqName,\r\n                imgPath: imgFullUrl\r\n            };\r\n\r\n            item.item_images.push(newImgObj);\r\n\r\n            await item.save();\r\n    \r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Item image added successfully\",\r\n                data: item.item_images,\r\n            });\r\n        }\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE ITEM IMAGES\r\nconst deleteItemImages = async (req, res) => {\r\n    try {\r\n        let { itemId, imageId } = req.params;\r\n\r\n        if (!itemId, !imageId) {\r\n            return res.status(400).send({ status: false, message: \"all fields are required\"});\r\n        };\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item not found\"});\r\n        };\r\n\r\n        if (item.item_images.length) {\r\n            for (let i=0; i<item.item_images.length; i++) {\r\n                if ( imageId === item.item_images[i]._id.toString() ) {\r\n                    let arr = item.item_images;\r\n                    arr.splice(i,1);\r\n                    item.item_images = arr;\r\n                    await item.save();\r\n                }\r\n            }\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Image deleted successfully\",\r\n            data: item.item_images\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL ITEMS\r\nconst getAllItems = async (req, res) => {\r\n    try {\r\n        let { userId} = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"UserId is required\"});\r\n        };\r\n\r\n        let items = await itemModel.find({ userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: items\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ITEM BY ITEM ID\r\nconst getItemById = async (req, res) => {\r\n    try {\r\n        const { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Item Id\"});\r\n        };\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: item\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPDATE ITEM BY ITEM ID\r\nconst updateItemById = async (req, res) => {\r\n    try {\r\n        let { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Item Id\"});\r\n        };\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\"});\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"item_name\" in e) {\r\n            item.item_name = e.item_name;\r\n        };\r\n\r\n        if (\"description\" in e) {\r\n            item.description = e.description;\r\n        };\r\n\r\n        if (\"selling_price\" in e) {\r\n            item.selling_price = e.selling_price;\r\n        };\r\n\r\n        if (\"isTaxable\" in e) {\r\n            item.isTaxable = e.isTaxable;\r\n        };\r\n\r\n        if (\"preparing_time\" in e) {\r\n            item.preparing_time = e.preparing_time;\r\n        };\r\n\r\n        if (\"notes\" in e) {\r\n            item.notes = e.notes;\r\n        };\r\n\r\n        if (\"visit_count\" in e) {\r\n            item.visit_count = e.visit_count;\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            item.status = e.status;\r\n        };\r\n\r\n        if (\"seo_keywords\" in e) {\r\n            item.seo_keywords = e.seo_keywords;\r\n        };\r\n\r\n        if (\"video_link\" in e) {\r\n            item.video_link = e.video_link;\r\n        };\r\n\r\n        if (\"isVeg\" in e) {\r\n            item.isVeg = e.isVeg;\r\n        };\r\n\r\n        await item.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Item Updated Successfully\",\r\n            data: item\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE ITEM BY ITEM ID\r\nconst deleteItemById = async (req, res) => {\r\n    try {\r\n        const { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Item Id\"});\r\n        };\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\"});\r\n        };\r\n\r\n        let oldImgName = item.item_images.imgName;\r\n\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(__dirname, \"..\", \"items\", oldImgName);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n        };\r\n        \r\n        await itemModel.deleteOne({ _id: itemId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Item deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addItems,\r\n    addUpdateItemImages,\r\n    deleteItemImages,\r\n    getAllItems,\r\n    getItemById,\r\n    updateItemById,\r\n    deleteItemById\r\n};","const menuModel = require('../models/menuModel');\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst restaurantModel = require('../models/restaurantModel');\r\nconst { isValidObjectId } = require('mongoose');\r\n\r\n\r\n// ADD MENU\r\nconst addMenu = async (req, res) => {\r\n    try {\r\n\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\"});\r\n        };\r\n\r\n        let { title, description, isActive } = req.body;\r\n        // if (!title || !description || !isActive || !userId) {\r\n        //     return res.status(400).send({ status: false, message: \"all fields are required\"});\r\n        // };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\"});\r\n        };\r\n\r\n        // let { thumbnail } = req.files;\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.thumbnail;\r\n\r\n        let thumbnailObj;\r\n        if (req.body.thumbnail) {\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/menus/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"menus\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            thumbnailObj = {\r\n                imgName: imgUniqName,\r\n                imgPath: imgUrl\r\n            };\r\n        }\r\n        \r\n        let menuData = {\r\n            title,\r\n            description,\r\n            thumbnail: thumbnailObj? thumbnailObj : \"\",\r\n            isActive,\r\n            userId\r\n        };\r\n\r\n        let newMenu = await menuModel.create(menuData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Menu added successfully\",\r\n            data: newMenu,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL MENUS\r\nconst getAllMenus = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let allMenus = await menuModel.find({userId});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            munus: allMenus\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET MENU BY MENUID\r\nconst getMenuById = async (req, res) => {\r\n    try {\r\n        let { menuId } = req.params;\r\n        if ( !menuId ) {\r\n            return res.status(400).send({ status: false, message: \"menuId is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(menuId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid menuId\"});\r\n        };\r\n\r\n        let menu = await menuModel.findById(menuId);\r\n\r\n        if (!menu) {\r\n            return res.status(400).send({ status: false, message: \"Menu not found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: menu\r\n        })\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPDATE MENU\r\nconst updateMenu = async (req, res) => {\r\n    try {\r\n        const { menuId } = req.params;\r\n        if (!menuId) {\r\n            return res.status(400).send({ status: false, message: \"menuId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(menuId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid menuId\"});\r\n        };\r\n\r\n        let menu = await menuModel.findById(menuId);\r\n\r\n        if (!menu) {\r\n            return res.status(400).send({ status: false, message: \"Menu not found\"});\r\n        };\r\n\r\n        let ele = req.body;\r\n\r\n        if (\"title\" in ele) {\r\n            menu.title = ele.title;\r\n        };\r\n\r\n        if (\"description\" in ele) {\r\n            menu.description = ele.description;\r\n        };\r\n\r\n        if (\"isActive\" in ele) {\r\n            menu.isActive = ele.isActive;\r\n        };\r\n\r\n        if (\"thumbnail\" in ele) {\r\n\r\n            let oldImg = menu.thumbnail.imgName;\r\n\r\n            let oldImgPath = path.join(__dirname, \"..\", \"menus\", oldImg);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.thumbnail;\r\n\r\n            let decodedImg = Buffer.from(File_data, \"base64\");\r\n\r\n            let imgRelativePath = \"/menus/\";\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"menus\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedImg);\r\n\r\n            let imgObj = {\r\n                imgName: imgUniqName,\r\n                imgPath: imgUrl\r\n            };\r\n\r\n            menu.thumbnail = imgObj;\r\n        };\r\n\r\n        await menu.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Menu updated successfully\",\r\n            data: menu\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE MENU BY ID\r\nconst deleteMenu = async (req, res) => {\r\n    try {\r\n        const { menuId } = req.params;\r\n        if (!menuId) {\r\n            return res.status(400).send({ status: false, message: \"menuId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(menuId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid menuId\"});\r\n        };\r\n\r\n        let menu = await menuModel.findById(menuId);\r\n\r\n        if (!menu) {\r\n            return res.status(400).send({ status: false, message: \"Menu not found\"});\r\n        };\r\n\r\n        let oldImg = menu.thumbnail.imgName;\r\n\r\n        let oldImgPath = path.join(__dirname, \"..\", \"menus\", oldImg);\r\n\r\n        if (fs.existsSync(oldImgPath)) {\r\n            fs.unlinkSync(oldImgPath);\r\n        };\r\n\r\n        await menuModel.deleteOne({ _id: menuId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Menu deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\nmodule.exports = {\r\n    addMenu,\r\n    getAllMenus,\r\n    getMenuById,\r\n    updateMenu,\r\n    deleteMenu\r\n};","const { isValidObjectId } = require(\"mongoose\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst restaurantModel = require(\"../models/restaurantModel\");\r\n\r\nconst uuid = require('uuid');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nconst { port } = require(\"../config/config\");\r\n\r\n// CREATE ORDER\r\nconst createOrder = async (req, res) => {\r\n    try {\r\n        const { restaurant_id } = req.params;\r\n\r\n        if (!restaurant_id) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Id is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(restaurant_id)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Restaurant Id\" });\r\n        }\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId: restaurant_id });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\" });\r\n        }\r\n\r\n        let { table_name, customer_name, customer_mobile, head_count, status, notes, item_list, total_items, tax, total, grand_total, question, feedback } = req.body;\r\n\r\n        let items = [];\r\n\r\n        for (let itemData of item_list) {\r\n            let { item_name, qty, imgUrl, selling_price, isVeg, isTaxable } = itemData;\r\n\r\n            items.push({\r\n                item_name,\r\n                qty,\r\n                imgUrl,\r\n                selling_price,\r\n                isVeg,\r\n                isTaxable,\r\n            });\r\n        }\r\n\r\n        let orderData = {\r\n            table_name,\r\n            customer_name,\r\n            customer_mobile,\r\n            head_count,\r\n            status,\r\n            notes,\r\n            item_list,\r\n            total_items,\r\n            tax,\r\n            total,\r\n            grand_total,\r\n            question,\r\n            feedback,\r\n        };\r\n\r\n        let newOrder = await orderModel.create(orderData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order created successfully\",\r\n            data: newOrder,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL ORDERS\r\nconst getAllOrders = async (req, res) => {\r\n    try {\r\n        let orders = await orderModel.find();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: orders,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ORDER BY ORDER ID\r\nconst getOrderById = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"Order Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Order Id\" });\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: order,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message }); \r\n    }\r\n};\r\n\r\n\r\n// UPDATE ORDER\r\nconst updateOrderById = async (req, res) => {\r\n    try {\r\n        const { orderId, restaurant_id, customer_name } = req.params;\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"OrderId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid OrderId\"});\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        let restaurant;\r\n        if (restaurant_id) {\r\n            restaurant = await restaurantModel.findOne({ userId: restaurant_id });\r\n\r\n            if (!restaurant) {\r\n                return res.status(400).send({ status: false, message: \"Restaurant Not Found\" });\r\n            };\r\n        };\r\n\r\n        let flag = restaurant ? restaurant : customer_name;\r\n\r\n        let e = req.body;\r\n\r\n        if (\"table_name\" in e) {\r\n            order.table_name = e.table_name;\r\n        };\r\n\r\n        if (\"customer_name\" in e) {\r\n            order.customer_name = e.customer_name;\r\n        };\r\n\r\n        if (\"customer_mobile\" in e) {\r\n            order.customer_mobile = e.customer_mobile;\r\n        };\r\n\r\n        if (\"head_count\" in e) {\r\n            order.head_count = e.head_count;\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            order.status = e.status;\r\n        };\r\n\r\n        if (\"notes\" in e) {\r\n            order.notes = e.notes;\r\n        };\r\n\r\n        if (\"item_list\" in e) {\r\n            if (order.item_list.length) {\r\n                for (let item of order.item_list) {\r\n                    if (\"item_name\" in e.item_list) {\r\n                        item.item_name = e.item_list.item_name;\r\n                    };\r\n\r\n                    if (\"qty\" in e.item_list) {\r\n                        item.qty = e.item_list.qty;\r\n                    };\r\n\r\n                    if (\"selling_price\" in e.item_list) {\r\n                        item.selling_price = e.item_list.selling_price;\r\n                    };\r\n\r\n                    if (\"isTaxable\" in e.item_list) {\r\n                        item.isTaxable = e.item_list.isTaxable;\r\n                    };\r\n\r\n                    if (\"isVeg\" in e.item_list) {\r\n                        item.isVeg = e.item_list.isVeg;\r\n                    };\r\n                }\r\n            }  \r\n        };\r\n\r\n        if (\"total_items\" in e) {\r\n            order.total_items = e.total_items;\r\n        };\r\n\r\n        if (\"tax\" in e) {\r\n            order.tax = e.tax;\r\n        };\r\n\r\n        if (\"question\" in e) {\r\n            order.question = e.question;\r\n        };\r\n\r\n        if (\"feedback\" in e) {\r\n            order.feedback = e.feedback;\r\n        };\r\n\r\n        await order.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order updated successfully\",\r\n            data: order,\r\n            canceledBy: flag,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE ORDER BY ID\r\nconst deleteOrderById = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"OrderId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid OrderId\"});\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        await orderModel.deleteOne({ _id: orderId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order deleted successfully\",\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// CANCEL ORDER\r\nconst cancelOrder = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n        if (orderId) {\r\n            return res.status(400).send({ status: false, message: \"OrderId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid orderId\" });\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order Not found\"});\r\n        };\r\n\r\n        if (order.status === \"CANCELED\") {\r\n            return res.status(400).send({ status: false, message: \"This order is already canceled\"});\r\n        };\r\n\r\n        let { status, restaurant_id, customer_mobile, customer_name } = req.body;\r\n\r\n        let restaurant;\r\n        if (restaurant_id) {\r\n            restaurant = await restaurantModel.findOne({ userId: restaurant_id });\r\n        };\r\n\r\n        let flag = restaurant ? restaurant : customer_name;\r\n\r\n        order.status = status;\r\n\r\n        await order.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order Canceled Successfully\",\r\n            data: order,\r\n            canceledBy: flag,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE ORDER BY RESTAURANT\r\nconst updateOrderByRestaurant = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"Order Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid orderId\"});\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        let { status } = req.body;\r\n\r\n        if (order.status === \"CANCELED\") {\r\n            return res.status(400).send({ status: false, message: \"This order is already canceled\"});\r\n        }\r\n\r\n        order.status = status\r\n\r\n        await order.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order updated successfully\",\r\n            order: order,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPLOAD ITEMS IMAGES\r\nconst uploadItemImages = async (req, res) => {\r\n    try {\r\n        let { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\"});\r\n        };\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item not found\"});\r\n        };\r\n\r\n        let itemImages = Array.isArray(req.files.itemImages) ? req.files.itemImages : [req.files.itemImages];\r\n\r\n        if (!itemImages.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No item image uploaded\"});\r\n        };\r\n\r\n        let itemImgArr = [];\r\n\r\n        for (let img of itemImages) {\r\n            let imgRelativePath = \"/items/\";\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgUniqName = uuid.v4() + \".\" + img.name.split(\".\").pop();\r\n            let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"items\", imgUniqName);\r\n\r\n            img.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let imgObj = {\r\n                imgName: imgUniqName,\r\n                imgUrl: imgUrl\r\n            };\r\n\r\n            itemImgArr.push(imgObj);\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: item,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// AUTH ITEM IMAGES\r\nconst authItemImages = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"UserId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\"});\r\n        };\r\n\r\n        let imgObj = {\r\n            imgName: \"\",\r\n            imgPath: \"\"\r\n        };\r\n\r\n        if (req.body.thumbnail) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.thumbnail;\r\n\r\n            let decodedImg = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/items/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"items\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedImg);\r\n\r\n            imgObj = {\r\n                imgName: imgUniqName,\r\n                imgPath: imgUrl\r\n            };\r\n        };\r\n\r\n        let { image } = req.files;\r\n\r\n        if (!image) {\r\n            return res.status(400).send({ status: false, message: \"No image uploaded\"});\r\n        };\r\n\r\n        let relPath = \"/banners/\";\r\n        let ipAddress = getCurrentIPAddress();\r\n        let imageUniqName = uuid.v4() + \".\" + image.name.split(\".\").pop();\r\n        let imageUrl = `http://${ipAddress}:${port}${relPath}`;\r\n        let imageSavingPath = path.join(__dirname, \"..\", \"banners\", imageUniqName);\r\n\r\n        image.mv(imageSavingPath, (err) => {\r\n            if (err) throw err;\r\n        });\r\n\r\n        let { File_path, File_Extension, File_data, File_name } = req.body.itemImage;\r\n\r\n        if (!File_path || !File_Extension || !File_data || !File_name) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        let fileUniqNmae = uuid.v4() + \".\" + file.name.split(\".\").pop();\r\n\r\n        \r\n\r\n        let itemData = {\r\n            title,\r\n            description,\r\n            itemStatus,\r\n            thumbnail: imgObj,\r\n        };\r\n\r\n        let newItem = await itemModel.create(itemData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: newItem,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    createOrder,\r\n    getAllOrders,\r\n    getOrderById,\r\n    updateOrderById,\r\n    deleteOrderById,\r\n    cancelOrder,\r\n    updateOrderByRestaurant,\r\n    uploadItemImages\r\n};\r\n","const restaurantModel = require(\"../models/restaurantModel\");\r\nconst deletedUserModel = require('../models/deleteUserModel');\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// LOGIN USER\r\nconst authenticateAdmin = async (req, res) => {\r\n    try {\r\n        let { userId, userName, email, profilePic } = req.body;\r\n\r\n        const isUserExists = await restaurantModel.findOne({ userId });\r\n\r\n        if (!isUserExists) {\r\n            let userObj = {\r\n                userId,\r\n                userName,\r\n                email,\r\n                profilePic\r\n            };\r\n\r\n            let newUser = await restaurantModel.create(userObj);\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: newUser\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: isUserExists,\r\n            });\r\n        };\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// REGISTER USER\r\nconst updateRestaurantDatails = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Restaurant not found\",\r\n            });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"userName\" in reqBody) {\r\n            restaurant.userName = reqBody.userName;\r\n        };\r\n\r\n        if (\"restaurantName\" in reqBody) {\r\n            restaurant.restaurantName = reqBody.restaurantName;\r\n        };\r\n\r\n        if (\"mobile\" in reqBody) {\r\n            restaurant.mobile = reqBody.mobile;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            restaurant.description = reqBody.description;\r\n        };\r\n\r\n        if (\"restaurant_address\" in reqBody) {\r\n            if (\"address\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.address = reqBody.restaurant_address.address;\r\n            };\r\n\r\n            if (\"apartment\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.apartment = reqBody.restaurant_address.apartment;\r\n            };\r\n\r\n            if (\"city\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.city = reqBody.restaurant_address.city;\r\n            };\r\n\r\n            if (\"post_code\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.post_code = reqBody.restaurant_address.post_code;\r\n            };\r\n\r\n            if (\"state\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.state = reqBody.restaurant_address.state;\r\n            }\r\n        };\r\n\r\n        if (\"slug\" in reqBody) {\r\n            let allRestaurant = await restaurantModel.find();\r\n\r\n            for (let obj of allRestaurant) {\r\n                if (reqBody.slug === obj.slug) {\r\n                    return res.status(200).send({ status: false, message: \"This slug is duplicate\"});\r\n                }\r\n            };\r\n            restaurant.slug = reqBody.slug;\r\n        };\r\n\r\n        if (\"sitting_capacity\" in reqBody) {\r\n            restaurant.sitting_capacity = reqBody.sitting_capacity;\r\n        };\r\n\r\n        if (\"isVeg\" in reqBody) {\r\n            restaurant.isVeg = reqBody.isVeg;\r\n        };\r\n\r\n        if (\"max_allow_seating\" in req.body) {\r\n            restaurant.max_allow_seating = reqBody.max_allow_seating;\r\n        };\r\n\r\n        if (\"contact_number\" in reqBody) {\r\n            restaurant.contact_number  = reqBody.contact_number\r\n        };\r\n\r\n        if (\"contact_person\" in reqBody) {\r\n            restaurant.contact_person = reqBody.contact_person;\r\n        };\r\n\r\n        if (\"website\" in reqBody) {\r\n            restaurant.website = reqBody.website;\r\n        };\r\n\r\n        if (\"rating_review_url\" in reqBody) {\r\n            restaurant.rating_review_url = reqBody.rating_review_url;\r\n        };\r\n\r\n        if (\"GST_number\" in reqBody) {\r\n            restaurant.GST_number = reqBody.GST_number;\r\n        };\r\n\r\n        if (\"isActive\" in reqBody) {\r\n            restaurant.isActive = reqBody.isActive;\r\n        };\r\n\r\n        await restaurant.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Restaurant updated successfully\",\r\n            data: restaurant,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADD OR UPDATE LOGO\r\nconst addUpdateLogo = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Restaurant not found\",\r\n            });\r\n        };\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/banners/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"banners\", imgUniqName);\r\n\r\n        let oldImgName = restaurant.logo.logoName;\r\n\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(__dirname, \"..\", \"banners\", oldImgName);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n        };\r\n        \r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n        let logoObj = {\r\n            logoName: imgUniqName,\r\n            logoPath: imgFullUrl\r\n        };\r\n\r\n        restaurant.logo = logoObj;\r\n\r\n        await restaurant.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"logo updated successfully\",\r\n            logo: restaurant.logo,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET USER BY ID\r\nconst getRestaurantById = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId ) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        // };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Restaurant not found\",\r\n            });\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: restaurant\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL USERS\r\nconst getAllRestaurants = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"key is required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let restaurants = await restaurantModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: restaurants\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE USER\r\nconst deleteRestaurant = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Restaurant not found\",\r\n            });\r\n        };\r\n\r\n        const { reason, feedback} = req.body;\r\n\r\n        let restaurantData = {\r\n            restaurant,\r\n        };\r\n\r\n        let jsonStr = JSON.stringify(restaurantData);\r\n\r\n        await restaurantModel.deleteOne({ userId });\r\n\r\n        let deletedUserData = {\r\n            userId,\r\n            deletedRestaurantData: jsonStr,\r\n            reason,\r\n            feedback,\r\n            deletedAt: new Date().toLocaleString()\r\n        };\r\n\r\n        await deletedUserModel.create(deletedUserData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Restaurant deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    authenticateAdmin,\r\n    updateRestaurantDatails,\r\n    addUpdateLogo,\r\n    deleteRestaurant,\r\n    getRestaurantById,\r\n    getAllRestaurants\r\n};\r\n","const tableModel = require('../models/tableModel');\r\nconst restaurantModel = require('../models/restaurantModel');\r\nconst { isValidObjectId } = require('mongoose');\r\n\r\n\r\n// ADD TABLE\r\nconst addTable = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not Found\"});\r\n        };\r\n\r\n        let { table_name, table_type, head_count, isIndoor } = req.body;\r\n\r\n        if (!table_name || !table_type || !head_count || typeof isIndoor === 'undefined') {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        let tableId;\r\n        let isTableAlreadyExist;\r\n\r\n        do {\r\n            tableId = Math.floor(100000 + Math.random() * 899999);\r\n            isTableAlreadyExist = await tableModel.findOne({ tableId: tableId });\r\n        } while (isTableAlreadyExist);\r\n\r\n        let tableData = {\r\n            userId,\r\n            tableId: tableId,\r\n            table_name,\r\n            table_type,\r\n            head_count,\r\n            isIndoor\r\n        };\r\n\r\n        let newTable = await tableModel.create(tableData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Table added successfully\",\r\n            data: newTable\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL TABLES\r\nconst getAllTables = async (req, res) => {\r\n    try {\r\n\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not Found\"});\r\n        };\r\n\r\n        let tables = await tableModel.find({ userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: tables\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET TABLE BY TABLE ID\r\nconst getTableById = async (req, res) => {\r\n    try {\r\n        let { tableId } = req.params;\r\n        if (!tableId) {\r\n            return res.status(400).send({ status: false, message: \"Table Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(tableId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid TableId\"});\r\n        };\r\n\r\n        let table = await tableModel.findById(tableId);\r\n\r\n        if (!table) {\r\n            return res.status(400).send({ status: false, message: \"Table Not Found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: table,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPDATE TABLE BY TABLE ID\r\nconst updateTableById = async (req, res) => {\r\n    try {\r\n        let { tableId } = req.params;\r\n        if (!tableId) {\r\n            return res.status(400).send({ status: false, message: \"Table Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(tableId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid TableId\"});\r\n        };\r\n\r\n        let table = await tableModel.findById(tableId);\r\n\r\n        if (!table) {\r\n            return res.status(400).send(400).send({ status: false, message: \"Table Not Found\"});\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"table_name\" in e) {\r\n            table.table_name = e.table_name;\r\n        };\r\n\r\n        if (\"table_type\" in e) {\r\n            table.table_type = e.table_type;\r\n        };\r\n\r\n        if (\"head_count\" in e) {\r\n            table.head_count = e.head_count;\r\n        };\r\n\r\n        if (\"isIndoor\" in e) {\r\n            table.isIndoor = e.isIndoor;\r\n        }\r\n\r\n        await table.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Table updated successfully\",\r\n            data: table\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE TABLE BY TABLE ID\r\nconst deleteTableById = async (req, res) => {\r\n    try {\r\n        let { tableId } = req.params;\r\n        if (!tableId) {\r\n            return res.status(400).send({ status: false, message: \"Table Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(tableId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid TableId\"});\r\n        };\r\n\r\n        let table = await tableModel.findById(tableId);\r\n\r\n        if (!table) {\r\n            return res.status(400).send(400).send({ status: false, message: \"Table Not Found\"});\r\n        };\r\n\r\n        await tableModel.deleteOne({ _id: tableId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Table deleted successfully\",\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addTable,\r\n    getAllTables,\r\n    getTableById,\r\n    updateTableById,\r\n    deleteTableById\r\n};","class BaseError extends Error {\r\n    constructor(name, statusCode, description, details) {\r\n        super(description);\r\n        this.name = name;\r\n        this.statusCode = statusCode;\r\n        this.details = details;\r\n    }\r\n}\r\n\r\nmodule.exports = BaseError;","const { isValidObjectId } = require('mongoose');\r\nconst { tokenSecretKey } = require('../config/config');\r\nconst adminModel = require('../models/adminModel');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers[\"authorization\"];\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Token is required\"\r\n            });\r\n        };\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid token\"\r\n            });\r\n        };\r\n\r\n        let decodedToken;\r\n\r\n        jwt.verify(token, tokenSecretKey, (err, decode) => {\r\n            if (err) {\r\n                throw err;\r\n            };\r\n\r\n            decodedToken = decode;\r\n            let loginUserId = decodedToken.adminId;\r\n            req[\"adminId\"] = loginUserId;\r\n            next();\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.adminId;\r\n        let { adminId } = req.params;\r\n\r\n        if (!isValidObjectId(adminId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid userId\"})\r\n        };\r\n\r\n        let admin = await adminModel.findById(adminId);\r\n\r\n        if (!admin){\r\n            return res.status(404).send({ status: false, message: \"Admin not found\"})\r\n        };\r\n\r\n        let AdminId = admin._id;\r\n\r\n        if ( tokenId.toString() !== AdminId.toString() ) {\r\n            return res.status(403).send({\r\n                status: false,\r\n                message: \"NOT AUTHORIZED!!!\"\r\n            })\r\n        };\r\n\r\n        next();\r\n    } catch (error) {   \r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = { Authentication, Authorization }","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        userId: {\r\n            type: String,\r\n            unique: true,\r\n            default: \"\"\r\n        },\r\n\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        mobile: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        password: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Admin\", userSchema);\r\n","const mongoose = require('mongoose');\r\n\r\n\r\nconst deletedRestaurantsSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    deletedRestaurantData: {\r\n        type: String,\r\n    },\r\n\r\n    reason: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    },\r\n\r\n    deletedAt: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"DeletedRestaurant\", deletedRestaurantsSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst itemSchema = new mongoose.Schema({\r\n\r\n    userId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    menuId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    item_name: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    menuName: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    selling_price: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    isTaxable: {\r\n        type: Boolean\r\n    },\r\n\r\n    preparing_time: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    notes: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    item_images: [\r\n        { \r\n            imgName: { type: String, default: \"\" },\r\n            imgPath: { type: String, default: \"\" }\r\n        }\r\n    ],\r\n\r\n    visit_count: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    status: {\r\n        type: Boolean,\r\n    },\r\n\r\n    seo_keywords: [],\r\n\r\n    video_link: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    isVeg: {\r\n        type: Boolean\r\n    },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Item\", itemSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst menuSchema = new mongoose.Schema({\r\n\r\n    userId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    title: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    thumbnail: {\r\n        imgName: { type: String, default: \"\" },\r\n        imgPath: { type: String, default: \"\" }\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    isActive: {\r\n        type: Boolean,\r\n        default: true,\r\n    }\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Menu\", menuSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst orderSchema = new mongoose.Schema({\r\n    table_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    restaurant_id: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    customer_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    customer_mobile: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    head_count: {\r\n        type: Number,\r\n        default: 1\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        enum: [\"PENDING\", \"PREPARING\", \"CANCELED\", \"APPROVED\", \"COMPLETED\", \"UNDEFINED\"],\r\n        default: \"UNDEFINED\"\r\n    },\r\n\r\n    notes: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    item_list: [\r\n        {\r\n            item_name: { type: String, default: \"\" },\r\n            qty: { type: Number, default: 1 },\r\n            selling_price: { type: Number, default: 0 },\r\n            isTaxable: { type: Boolean },\r\n            imgUrl: { type: String, default: \"\" },\r\n            isVeg: { type: Boolean }\r\n        }\r\n    ],\r\n\r\n    total_items: {\r\n        type: Number,\r\n    },\r\n\r\n    tax: {\r\n        type: Number\r\n    },\r\n\r\n    total: {\r\n        type: Number\r\n    },\r\n\r\n    grand_total: {\r\n        type: Number\r\n    },\r\n\r\n    question: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    }\r\n    \r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Order\", orderSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst restaurantSchema = new mongoose.Schema({\r\n\r\n    userId: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n\r\n    userName: {\r\n        type: String,\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    profilePic: {\r\n        type: String,\r\n    },\r\n\r\n    restaurantName: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    restaurant_address: {\r\n        address: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        apartment: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        city: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        post_code: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        state: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    logo: {\r\n        logoName: { type: String, default: \"\" },\r\n        logoPath: { type: String, default: \"\" }\r\n    },\r\n\r\n    slug: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    sitting_capacity: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    isVeg: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n\r\n    max_allow_seating: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    banners: [\r\n        {\r\n            imageName: { type: String, default: \"\" },\r\n            imagePath: { type: String, default: \"\" }\r\n        }\r\n    ],\r\n\r\n    contact_number: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    contact_person: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    website: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    rating_review_url: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    GST_number: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    tax: {\r\n        type: String,\r\n    },\r\n\r\n    isActive: {\r\n        type: Boolean,\r\n        default: true,\r\n    },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Restaurant\", restaurantSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst tableSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    tableId: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n\r\n    table_name: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n\r\n    table_type: {\r\n        type: String,\r\n    },\r\n\r\n    head_count: {\r\n        type: Number,\r\n    },\r\n\r\n    isIndoor: {\r\n        type: Boolean\r\n    }\r\n    \r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Table\", tableSchema);","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createAdmin, \r\n    adminLogin, \r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n    getAllBookingsOfUser,\r\n} = require('../../controllers/adminController');\r\n\r\nconst { Authentication, Authorization } = require('../../middlewares/auth');\r\n\r\n// SIGNUP ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/createSuperAdmin\", createAdmin);\r\n\r\n// LOGIN ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/loginSuperAdmin\", adminLogin);\r\n\r\n// GET ONE DAY BOOKINGS (ADMIN API) // date format: 2024-05-02\r\nrouter.get(\"/api/v1/getOneDayBookings/:adminId/:sessionToken/:date?\", getOneDayBookings);\r\n\r\n// GET ONE WEEK BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneWeekBookings/:adminId/:sessionToken/:startDate?/:endDate?\", getOneWeekBookings);\r\n\r\n// GET ONE MONTH BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneMonthBookings/:adminId/:sessionToken/:month/:year\", getOneMonthBookings);\r\n\r\n// GET ONE YEAR BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneYearBookings/:adminId/:sessionToken/:year\", getOneYearBookings);\r\n\r\n// GET ALL BOOKINGS OF AN USER (ADMIN API)\r\nrouter.get(\"/api/v1/getUserAllBookings/:adminId/:sessionToken/:userId\", getAllBookingsOfUser);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getDashboard, getAllBannerImages, updateBannerImages, deleteBannerImage } = require('../../controllers/dashboard');\r\n\r\n// GET DASHBOARD\r\nrouter.get(\"/api/v1/getDashboard/:userId?\", getDashboard);\r\n\r\n// GET ALL BANNERS OF A RESTAURANT\r\nrouter.get(\"/api/v1/getBanners/:userId\", getAllBannerImages);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.put(\"/api/v1/addOrUpdateBanner/:userId\", updateBannerImages);\r\n\r\n// DELETE BANNER IMAGE\r\nrouter.delete(\"/api/v1/deleteBanner/:imageId/:userId\", deleteBannerImage);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { addItems, getAllItems, addUpdateItemImages, updateItemById, deleteItemById, deleteItemImages } = require('../../controllers/itemController');\r\n\r\n// ADD ITEMS\r\nrouter.post(\"/api/v1/addItem/:userId\", addItems);\r\n\r\n// ADD / UPDATE ITEM IMAGES\r\nrouter.post(\"/api/v1/updateItemImages/:itemId\", addUpdateItemImages);\r\n\r\n// GET ALL ITEMS\r\nrouter.get(\"/api/v1/getAllItems/:userId\", getAllItems);\r\n\r\n// UPDATE ITEM BY ID\r\nrouter.put(\"/api/v1/updateItem/:itemId\", updateItemById);\r\n\r\n// DELETE ITEM BY ID\r\nrouter.delete(\"/api/v1/deleteItem/:itemId\", deleteItemById);\r\n\r\n// DELETE ITEM IMAGE\r\nrouter.delete(\"/api/v1/deleteItemImage/:itemId/:imageId\", deleteItemImages);\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { addMenu, getAllMenus, getMenuById, updateMenu, deleteMenu  } = require('../../controllers/menuController');\r\n\r\n// ADD MENU\r\nrouter.post(\"/api/v1/addMenu/:userId\", addMenu);\r\n\r\n// GET ALL MENUS\r\nrouter.get(\"/api/v1/getAllMenus/:userId\", getAllMenus);\r\n\r\n// GET MENU BY MENU ID\r\nrouter.get(\"/api/v1/getMenu/:menuId\", getMenuById);\r\n\r\n// UPDATE MENU BY MENU ID\r\nrouter.put(\"/api/v1/updateMenu/:menuId\", updateMenu);\r\n\r\n// DELETE MENU BY MENU ID\r\nrouter.delete(\"/api/v1/deleteMenu/:menuId\", deleteMenu);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { createOrder, getAllOrders, getOrderById, updateOrderById } = require('../../controllers/orderController');\r\n\r\n// CREATE ORDER\r\nrouter.post(\"/api/v1/createOrder/:restaurant_id\", createOrder);\r\n\r\n// GET ALL ORDERS\r\nrouter.get(\"/api/v1/getAllOrders\", getAllOrders);\r\n\r\n// GET ORDER BY ORDER ID\r\nrouter.get(\"/api/v1/getOder/:orderId\", getOrderById);\r\n\r\n// UPDATE ORDER BY ORDER ID\r\nrouter.put(\"/api/v1/updateOrder/:orderId\", updateOrderById);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {\r\n    authenticateAdmin,\r\n    updateRestaurantDatails,\r\n    addUpdateLogo,\r\n    getAllRestaurants,\r\n    getRestaurantById,\r\n    deleteRestaurant, \r\n    \r\n} = require('../../controllers/restaurantController');\r\n\r\n// AUTHENTICATE USER\r\nrouter.post(\"/api/v1/authenticateRestaurant\", authenticateAdmin);\r\n\r\n// GET USER BY ID\r\nrouter.get(\"/api/v1/getRestaurant/:userId/:key\", getRestaurantById);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/restaurant/:key\", getAllRestaurants);\r\n\r\n// UPDATE USER\r\nrouter.post(\"/api/v1/updateRestaurant/:userId\", updateRestaurantDatails);\r\n\r\n// ADD UPDATE LOGO\r\nrouter.post(\"/api/v1/updateLogo/:userId\", addUpdateLogo);\r\n\r\n// DELETE USER BY USER ID\r\nrouter.delete(\"/api/v1/deleteRestaurant/:userId\", deleteRestaurant);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addTable, \r\n    getAllTables, \r\n    getTableById, \r\n    updateTableById, \r\n    deleteTableById \r\n} = require('../../controllers/tableController');\r\n\r\n// ADD TABLE\r\nrouter.post(\"/api/v1/addTable/:userId\", addTable);\r\n\r\n// GET ALL TABLES\r\nrouter.get(\"/api/v1/getAllTables/:userId\", getAllTables);\r\n\r\n// GET TABLE BY ID\r\nrouter.get(\"/api/v1/getTable/:tableId\", getTableById);\r\n\r\n// UPDATE TABLE BY ID\r\nrouter.put(\"/api/v1/updateTable/:tableId\", updateTableById);\r\n\r\n// DELETE TABLE BY ID\r\nrouter.delete(\"/api/v1/deleteTable/:tableId\", deleteTableById);\r\n\r\nmodule.exports = router;","const BaseError = require('../errors/base.error');\r\nconst { StatusCodes } = require('http-status-codes');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n    if (err instanceof BaseError) {\r\n        return res.status(err.statusCode).json({\r\n            success: false,\r\n            message: err.message,\r\n            err: err.details,\r\n            data: {}\r\n        });\r\n    };\r\n\r\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n        success: false,\r\n        message: \"Something went wrong\",\r\n        err: err,\r\n        data: {}\r\n    });\r\n};\r\n\r\nmodule.exports = { errorHandler };","const os = require(\"os\");\r\n\r\n// GET CURRENT IP ADDRESS\r\nlet getCurrentIPAddress = () => {\r\n    let networkInterfaces = os.networkInterfaces();\r\n    let ipAddress = Object.values(networkInterfaces)\r\n        .flat()\r\n        .filter((iface) => iface.family === \"IPv4\" && !iface.internal)\r\n        .map((iface) => iface.address)[0];\r\n    return ipAddress;\r\n};\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n};\r\n\r\nmodule.exports = {\r\n    getCurrentIPAddress,\r\n    generateRandomAlphaNumericID,\r\n};\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"http-status-codes\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"uuid\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require(\"cors\");\r\nconst { port } = require('./config/config');\r\nconst { connectToDB } = require('./config/db.config');\r\nconst { errorHandler } = require('./uitls/errorHandler');\r\n\r\nconst app = express();\r\n\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\n\r\napp.use(fileUpload());\r\napp.use(cors());\r\n\r\nconst adminRoutes = require('./routes/v1/adminRoutes');\r\nconst restaurantRoutes = require('./routes/v1/restaurantRoutes');\r\nconst dashboardRoutes = require(\"./routes/v1/dashboardRoutes\");\r\nconst orderRoutes = require('./routes/v1/orderRoutes');\r\nconst menuRoutes = require('./routes/v1/menuRoutes');\r\nconst itemRoutes = require('./routes/v1/itemRoutes');\r\nconst tableRoutes = require('./routes/v1/tableRoutes');\r\n\r\napp.use(\"/banners\", express.static(__dirname + \"/banners\"));\r\napp.use(\"/items\", express.static(__dirname + \"/items\"));\r\napp.use(\"/menus\", express.static(__dirname + \"/menus/\"));\r\n\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", restaurantRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", orderRoutes);\r\napp.use(\"/\", menuRoutes);\r\napp.use(\"/\", itemRoutes);\r\napp.use(\"/\", tableRoutes);\r\n\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>QR App is Up and Running</h1>\");\r\n});\r\n\r\n// Last middleware if any error comes\r\napp.use(errorHandler);\r\n\r\napp.listen(port, async() => {\r\n    console.log(\"Server is running on port\", port);\r\n\r\n    await connectToDB();\r\n    console.log(\"Database connected\");\r\n});\r\n\r\n"],"names":["config","module","exports","mongoDbUrl","process","env","MONGO_DB_URL","logDbUrl","LOG_DB_URL","tokenSecretKey","JWT_SECRET","port","PORT","adminSecretKey","ADMIN_SECRET_KEY","mongoose","connectToDB","connect","error","console","log","adminModel","jwt","bcrypt","getCurrentIPAddress","generateRandomAlphaNumericID","createAdmin","async","req","res","name","email","password","mobile","body","status","send","message","hash","adminObj","userId","newAdmin","create","data","adminLogin","admin","findOne","compare","err","result","date","Date","now","issueTime","Math","floor","token","sign","adminId","_id","toString","iat","expiresIn","setHeader","sessionToken","save","hasAccess","getAllBookingsOfUser","params","userModel","userAllBookings","bookingModel","find","getOneDayBookings","today","year","getFullYear","String","getMonth","padStart","getDate","oneDayBookings","BookingDate","grandTotal","booking","grand_total","totalBookings","oneDayRevenue","getOneWeekBookings","startDate","endDate","oneWeekAgo","getTime","startYear","oneWeekBookings","$gte","$lte","length","getOneMonthBookings","month","oneMonthBookings","createdAt","oneMonthRevenue","getOneYearBookings","oneYearBookings","oneYearRequests","oneYearRevenue","restaurantModel","uuid","path","fs","isValidObjectId","getDashboard","restaurant","bannerImages","banners","updateBannerImages","ImageModel","parsedData","JSON","parse","bannerImage","files","index","isNewPick","img_id","imageName","currentIpAddress","imgRelativePath","imgUniqName","v4","split","pop","imgFullUrl","imgSavingPath","join","__dirname","mv","newBannerObj","imagePath","push","oldImage","oldImgPath","existsSync","unlinkSync","updatedBannerObj","deleteBannerImage","imageId","i","imgName","imgPath","arr","splice","getAllBannerImages","itemModel","addItems","menuId","item_name","menuName","description","selling_price","isTaxable","preparing_time","notes","visit_count","seo_keywords","video_link","isVeg","itemData","newItem","addUpdateItemImages","itemId","item","findById","itemImage","newImgObj","item_images","oldImageName","oldImagePath","imgObj","deleteItemImages","getAllItems","items","getItemById","updateItemById","e","deleteItemById","oldImgName","deleteOne","menuModel","addMenu","title","isActive","thumbnailObj","File_Extension","File_Path","File_data","File_name","thumbnail","decodedData","Buffer","from","imgUrl","writeFileSync","menuData","newMenu","getAllMenus","allMenus","munus","getMenuById","menu","updateMenu","ele","oldImg","decodedImg","deleteMenu","orderModel","createOrder","restaurant_id","table_name","customer_name","customer_mobile","head_count","item_list","total_items","tax","total","question","feedback","qty","orderData","newOrder","getAllOrders","orders","getOrderById","orderId","order","updateOrderById","flag","canceledBy","deleteOrderById","cancelOrder","updateOrderByRestaurant","uploadItemImages","itemImages","Array","isArray","itemImgArr","img","deletedUserModel","authenticateAdmin","userName","profilePic","isUserExists","userObj","newUser","updateRestaurantDatails","reqBody","restaurantName","restaurant_address","address","apartment","city","post_code","state","allRestaurant","obj","slug","sitting_capacity","max_allow_seating","contact_number","contact_person","website","rating_review_url","GST_number","addUpdateLogo","logo","logoName","logoObj","logoPath","deleteRestaurant","reason","restaurantData","jsonStr","stringify","deletedUserData","deletedRestaurantData","deletedAt","toLocaleString","getRestaurantById","getAllRestaurants","key","restaurants","tableModel","addTable","tableId","isTableAlreadyExist","table_type","isIndoor","random","tableData","newTable","getAllTables","tables","getTableById","table","updateTableById","deleteTableById","BaseError","Error","constructor","statusCode","details","super","this","Authentication","next","tokenWithBearer","headers","decodedToken","verify","decode","loginUserId","Authorization","tokenId","AdminId","userSchema","Schema","Types","ObjectId","type","unique","default","required","trim","timestamps","model","deletedRestaurantsSchema","itemSchema","Number","Boolean","menuSchema","orderSchema","enum","restaurantSchema","tableSchema","router","Router","post","get","put","delete","StatusCodes","errorHandler","json","success","INTERNAL_SERVER_ERROR","os","networkInterfaces","Object","values","flat","filter","iface","family","internal","map","id","characters","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","express","bodyParser","fileUpload","cors","app","use","limit","urlencoded","extended","adminRoutes","restaurantRoutes","dashboardRoutes","orderRoutes","menuRoutes","itemRoutes","tableRoutes","static","listen"],"sourceRoot":""}